import { Contract, providers } from "ethers";
import { formatEther } from "ethers/lib/utils";
import Head from "next/head";
import { useEffect, useRef, useState } from "react";
import Web3Modal from "web3modal";
import {
  CRYPTODEVS_DAO_ABI,
  CRYPTODEVS_DAO_CONTRACT_ADDRESS,
  CRYPTODEVS_NFT_ABI,
  CRYPTODEVS_NFT_CONTRACT_ADDRESS,
} from "../constants";
import styles from "../styles/Home.module.css";

export default function Home() {
  // eth balance of dao contract
  const [treasuryBalance, setTreasuryBalance] = useState("0");

  // number of proposals in the dao
  const [numProposals, setNumProposals] = useState("0");

  // array of all proposals created in the dao
  const [proposals, setProposals] = useState([]);

  // user's balance of CryptoDev NFTs
  const [nftBalance, setNftBalance] = useState(0);

  // fake nft token ID to purchase. Used when creating a proposal
  const [fakeNftTokenid, setFakeNftTokenid] = useState("");

  // one of 'Create Proposal' or 'View Proposals'
  const [selectedTab, setSelectedTab] = useState("");

  // true if waiting for a transaction to be mined
  const [loading, setLoading] = useState(false);

  // true if user has connected their wallet
  const [walletConnected, setWalletConnected] = useState(false);

  const web3ModalRef = useRef();

  // fetches provider or signer instance from metamask
  const getProviderOrSigner = async (needSigner = false) => {
    const provider = await web3ModalRef.current.connect();
    const web3Provider = new providers.Web3Provider(provider);

    const { chainId } = await web3Provider.getNetwork();

    if (chainId !== 4) {
      window.alert("Please switch to the Rinkeby network!");
      throw new Error("Please switch to the Rinkeby network");
    }

    if (needSigner) {
      const signer = web3Provider.getSigner();
      return signer;
    }
    return web3Provider;
  };

  // return a dao contract instance given a provider/signer
  const getDaoContractInstance = (providerOrSigner) => {
    return new Contract(
      CRYPTODEVS_DAO_CONTRACT_ADDRESS,
      CRYPTODEVS_DAO_ABI,
      providerOrSigner
    );
  };

  // return a crypto dev nft contract instance given a provider/signer
  const getCryptodevsNFTContractInstance = (providerOrSigner) => {
    return new Contract(
      CRYPTODEVS_NFT_CONTRACT_ADDRESS,
      CRYPTODEVS_NFT_ABI,
      providerOrSigner
    );
  };

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
    </div>
  );
}
